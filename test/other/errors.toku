print("testing errors");

local debug = import("debug");

local fn checkerr(msg, f, ...) {
    local st, err = pcall(f, ...);
    assert(!st and reg.find(err, msg));
}

local fn doit(s) {
    local f, msg = load(s);
    if (!f)
        return msg;
    else {
        local cond;
        cond, msg = pcall(f);
        return !cond and msg;
    }
}

local fn checkmessage(prog, msg, debug) {
    local m = doit(prog);
    if (debug) print(m, msg);
    assert(reg.find(m, msg, 0, true));
}

local fn checksyntax(prog, extra, token, line) {
    local msg = doit(prog);
    if (!reg.find(token, "^<%a") and !reg.find(token, "^char%("))
        token = "'"..token.."'";
    token = reg.gsub(token, "(%p)", "%%%1");
    local pt = string.fmt([=[^%%[string ".*"%%]:%d: .- near %s$]=], line, token);
    assert(reg.find(msg, pt));
    assert(reg.find(msg, msg, 0, true));
}

/// test error message with no extra info
assert(doit("error(\"hi\", 0);") == "hi");

/// test nil error message
assert(doit("error();") == "<no error object>");

/// test common errors
assert(doit("list.flatten([], 0, n=2**30);"));
assert(doit("a=math.sin();"));
assert(!doit("tostr(1);") and doit("tostr()"));
assert(doit("tonum()"));
assert(doit("loop break; a;"));
assert(doit("return;;"));
assert(doit("assert(false);"));
assert(doit("assert(nil);"));
assert(doit("fn a(... , ...) {}"));
assert(doit("fn a(, ...) {}"));
assert(doit("local l=[]; l = l[l.len] + 1"));

checksyntax([=[
  local a = [4

]=], "expected ']' (to close '[' at line 1)", "<eof>", 3);


/// tests for better error messages

checkmessage("a = {} + 1;", "arithmetic");
checkmessage("a = {} | 1;", "bitwise operation");
checkmessage("a = {} < 1;", "attempt to compare");
checkmessage("a = {} <= 1;", "attempt to compare");

checkmessage("aaa=1; bbbb=2; aaa=math.sin(3)+bbbb(3);", "global 'bbbb'");
checkmessage("local a={}; a.bbbb(3);", "field 'bbbb'");
assert(!reg.find(doit("aaa=[13]; local bbbb=0; aaa[bbbb](3);"), "'bbbb'"));
checkmessage("aaa=[13]; local bbbb=0; aaa[bbbb](3);", "number");
checkmessage("aaa=(1)..{};", "a number value");

checkmessage("a = {__ENV = {}}; print(a.__ENV.x + 1);", "field 'x'");

/// maybe index string value, (constant '__ENV') ?
checkmessage("print((\"__ENV\").x + 1);", "constant '__ENV'");

__G.aaa, __G.bbbb = nil;

/// calls
checkmessage("local a; a(13);", "local 'a'");

/// tail calls
checkmessage("local a={}; return a.bbbb(3);", "field 'bbbb'");

__G.aaa = nil;

checkmessage("aaa.bbb.ddd(9);", "global 'aaa'");
checkmessage("local aaa={bbb=1}; aaa.bbb.ddd(9);", "field 'bbb'");
checkmessage("local a,b,c; (fn() { a = b+1.1; })();", "upvalue 'b'");

/// upvalues being indexed do not go to the stack
checkmessage("local a,b,cc; (fn() { a = cc[1]; })();", "upvalue 'cc'");
checkmessage("local a,b,cc; (fn() { a.x = 1; })();", "upvalue 'a'");

checkmessage("local __ENV = {x={}}; a = a + 1;", "global 'a'");

checkmessage("BB=1; local aaa={}; x=aaa+BB;", "local 'aaa'");
checkmessage("aaa={}; x=3.3/aaa;", "global 'aaa'");
checkmessage("aaa=2; BB=nil;x=aaa*BB;", "global 'BB'");
checkmessage("aaa={}; x=-aaa;", "global 'aaa'");

/// short circuit
checkmessage("aaa=1; local aaa,bbbb=2,3; aaa = math.sin(1) and bbbb(3);",
             "local 'bbbb'");
checkmessage("aaa=1; local aaa,bbbb=2,3; aaa = bbbb(1) or aaa(3);",
             "local 'bbbb'");
checkmessage("local a,b,c,f = 1,1,1; f((a and b) or c);", "local 'f'");
checkmessage("local a,b,c = 1,1,1; ((a and b) or c)();", "call a number value");
assert(reg.find(doit("aaa={}; x=(aaa or aaa)+(aaa and aaa);"), "'aaa'"));
assert(reg.find(doit("aaa={}; (aaa or aaa)();"), "'aaa'"));

checkmessage("print(print < 10);", "function with number");
checkmessage("print(print < print);", "two function values");
checkmessage("print(\"10\" < 10);", "string with number");
checkmessage("print(10 < \"23\");", "string with number");

/// float->integer conversions
checkmessage("local a = 2.0**100; x = a << 2;", "local a");
checkmessage("local a = 1 >> 2.0**100;", "has no integer representation");
checkmessage("local a = 10.1 << 2.0**100;", "has no integer representation");
checkmessage("local a = 2.0**100 & 1;", "has no integer representation");
checkmessage("local a = 2.0**100 & 1e100;", "has no integer representation");
checkmessage("local a = 2.0 | 1e40;", "has no integer representation");
checkmessage("local a = 2e100 ^ 1;", "has no integer representation");
checkmessage("string.substr(\"a\", 2.0**100);", "has no integer representation");
checkmessage("string.repeat(\"a\", 3.3);", "has no integer representation");
checkmessage("return 6e40 & 7;", "has no integer representation");
checkmessage("return 34 << 7e30;", "has no integer representation");
checkmessage("return ~-3e40;", "has no integer representation");
checkmessage("return ~-3.009;", "has no integer representation");
checkmessage("return 3.009 & 1;", "has no integer representation");
checkmessage("return 34 >> {};", "table value");
checkmessage("aaa = 24 // 0;", "divide by zero");
checkmessage("aaa = 1 % 0;", "'n%0'");

/// block statement errors
checkmessage("{ return; print(\"ok\"); }", "'return' must be the last");
checkmessage("loop { break; print(\"ok\"); }", "'break' must be the last");
checkmessage("loop { continue; print(\"ok\"); }", "'continue' must be the last");
checkmessage("loop { print(\"ok\");", "expected '}'");


/// passing light userdata instead of full userdata
__G.D = debug;
checkmessage([=[
  /// create light udata
  local x = D.upvalueid(fn() { return debug; }, 0);
  D.setuservalue(x, {});
]=], "light userdata");
__G.D = nil;

{ /// named objects (field '__name')
    checkmessage("math.sin(io.input());", "(number expected, instead got FILE*)");
    __G.XX = (class{__name = "My Type";})();
    assert(reg.find(tostr(XX), "^My Type"));
    checkmessage("io.input(XX);", "(FILE* expected, instead got My Type)");
    checkmessage("return XX + 1;", "on a My Type value");
    checkmessage("return ~io.stdin;", "on a FILE* value");
    checkmessage("return XX < XX;", "two My Type values");
    checkmessage("return {} < XX;", "table with My Type");
    checkmessage("return XX < io.stdin;", "My Type with FILE*");
    __G.XX = nil;
}

/// metafield redefinition
checkmessage("local class X { xx=1;xx=2; }", "redefinition of 'xx' metafield");

/// invalid usage of 'super' keyword
checkmessage("local class Y; class X inherits Y { local x = super; }",
             "'super' usage outside of a class (meta)method");
checkmessage("class X inherits super.x {}",
             "'super' usage outside of a class definition");
checkmessage("(class { fn x() :: return super.x })().x();",
             "class instance has no superclass");
checkmessage([=[
class Y;
class X inherits Y {
    fn test() {
        local x;
        self, super, x = 5, 2, 3;
        return x;
    }
}
]=],
"can't assign to 'super' or it's property");

/// global functions
checkmessage("(io.write or print)({})", "io.write");
checkmessage("(gc or print)({})", "gc");

/// tests for field accesses after RK limit
local l = [];
for (local i=0; i <= 1000; i=i+1) {
    l[i] = "aaa = x" .. tostr(i);
}
local s = list.concat(l, "; ");
s = s .. ";";
l = nil;
checkmessage(s.." aaa = bbb + 1;", "global 'bbb'");
checkmessage("local __ENV=__ENV;"..s.." aaa = bbb + 1;", "global 'bbb'");
checkmessage(s.." local t = {};; aaa = t.bbb + 1;", "field 'bbb'");

checkmessage([=[aaa=9;
loop { if (3==3) break; }
local x=math.sin(math.cos(3));
if (math.sin(1) == x) return math.sin(1); /// tail call
local a,b = 1, [
    {x="a".."b".."c", y="b", z=x},
    [1,2,3,4,5] or 3+3<=3+3,
    3+1>3+1,
    {d = x and aaa[x or y]}
];
]=], "global 'aaa'");

checkmessage([=[
local x,y = {},1;
if (math.sin(1) == 0) return 3; /// return
x.a();]=], "field 'a'");

checkmessage([=[
prefix = nil;
insert = nil;
while (1) {
    local a;
    if (nil) break;
    insert(prefix, a);
}]=], "global 'insert'");

checkmessage([=[  /// tail call
    return math.sin("a");
]=], "sin");

checkmessage([=[gc("nooption");]=], "invalid option");

checkmessage([=[x = print .. "a";]=], "concatenate");
checkmessage([=[x = "a" .. false;]=], "concatenate");
checkmessage([=[x = {} .. tostr(2);]=], "concatenate");

checkmessage("getmetatable(io.stdin).__gc();", "no value");

checkmessage([=[
local Var;
local fn main() {
    NoSuchName(fn() { Var=0; });
}
main();
]=], "global 'NoSuchName'");

checkmessage("string.substr(\"a\", {});", "#2");
checkmessage("string.substr({});", "#1");

checkmessage("list.sort([1,2,3], list.sort);", "'list.sort'");
checkmessage("reg.gsub(\"s\", \"s\", setmetatable);", "'setmetatable'");

__G.aaa = nil;

/// errors in functions without debug info
{
    local f = |a| { return a + 1 };
    f = assert(load(string.dump(f, true)));
    assert(f(3) == 4);
    checkerr("^%?:%?:", f, {});

    /// code with a move to a local var ('OP_MOV A B' with A<B)
    f = || { local a; a = {}; return a + 2 };
    /// no debug info (so that 'a' is unknown)
    f = assert(load(string.dump(f, true)));
    /// symbolic execution should not get lost
    checkerr("^%?:%?:.*table value", f);
}

/// testing size of 'source' info; size of buffer for that info is
/// TOKU_IDSIZE, declared as 60 in tokuconf. Get one position for '\0'.
local idsize = 60 - 1;
local fn checksize(source) {
    /// syntax error
    local _, msg = load("x;", source);
    msg = reg.match(msg, "^([^:]*):"); /// get source (1st part before ':')
    assert(len(msg) <= idsize);
}

for (local i=60-10; i<=60; i=i+1) { /// check border cases around 60
    checksize("@" .. string.repeat("x", i)); /// file names
    checksize(string.repeat("x", i - 10)); /// string sources
    checksize("=" .. string.repeat("x", i)); /// exact sources
}


/// testing line error

local fn lineerror(s, l) {
    local err,msg = pcall(load(s));
    local line = tonum(reg.match(msg, ":(%d+):"));
    assert(line == l or (!line and !l));
}

lineerror("local a;\n foreach i in {} { \n print(i); \n }", 2);
lineerror("\n local a; \n foreach k,v in 3 \n { \n print(k); \n }", 3);
lineerror("\n\n foreach k,v in \n 3 \n { \n print(k); \n }", 4);
lineerror("fn a.x.y() {\na=a+1;\n}", 1);

lineerror("a = \na\n+\n{};", 3);
lineerror("a = \n3\n+\n(\n4\n/\nprint);", 6);
lineerror("a = \nprint\n+\n(\n4\n/\n7);", 3);

lineerror("a\n=\n-\n\nprint\n;", 3);

lineerror([=[
a
(     /// <<
23);
]=], 2);

lineerror([=[
local a = {x = 13};
a
.
x
(     /// <<
23
);
]=], 5);

lineerror([=[
local a = {x = 13};
a
.
x
(
23 + a
);
]=], 6);

local p = [=[
    fn g() { f(); }
    fn f(x) { error("a", XX); }
    g();
]=];
XX=3;lineerror((p), 3);
XX=0;lineerror((p), false);
XX=1;lineerror((p), 2);
XX=2;lineerror((p), 1);
__G.XX, __G.g, __G.f = nil;


lineerror([=[
local b = false;
if (!b) {
  error("test");
}]=], 3);

lineerror([=[
local b = false;
if (!b)
  if (!b)
    if (!b)
      error("test");
]=], 5);

lineerror([=[
__ENV = 1;
fn foo() {
  local a = 10;
  return a;
}
]=], 2);


lineerror([=[
  local a = 0;
  local b = 1;
  local c = b % a;
]=], 3);

{
    /// Force a negative estimate for base line. Error in instruction 3
    /// (after VARARGPREP, GETUVAL, GETINDEXSTR), with first absolute
    /// line information (forced by too many lines) in instruction 0.
    local s = string.fmt("%s return __A.x;", string.repeat("\n", 300));
    lineerror(s, 301);
}


if (__heavy and !(__TESTS.gc or __TESTS.memory or __TESTS.stack))
    and (!__opts or (__opts and __opts.run_isolated)) {
    /// several tests that exhaust the Tokudae stack
    gc();
    print("testing stack overflow");
    local C = 0;
    /// get line where stack overflow will happen
    local l = debug.getinfo(1, "l").currline + 1;
    local fn auxy() { C=C+1; auxy(); } /// produce a stack overflow
    fn YY() {
        gc("stop"); /// avoid running finalizers without stack space
        auxy();
        gc("restart");
    }

    local fn checkstackmessage(m) {
        print("(expected stack overflow after " .. tostr(C) .. " calls)");
        C = 0; /// prepare next count
        return (reg.find(m, "stack overflow"));
    }
    /// repeated stack overflows (to check stack recovery)
    assert(checkstackmessage(doit("YY();")));
    assert(checkstackmessage(doit("YY();")));
    assert(checkstackmessage(doit("YY();")));

    __G.YY = nil;

    /// error lines in stack overflow
    local l1;
    local fn g(x) {
        l1 = debug.getinfo(x, "l").currline + 2;
        gc("stop"); /// avoid running finalizers without stack space
        auxy();
        gc("restart");
    }
    local _, stackmsg = xpcall(g, debug.traceback, 1);
    local l2 = debug.getinfo(1, "l").currline - 1;
    local stack = [];
    foreach line in reg.gmatch(stackmsg, "[^\n]*") {
        local curr = reg.match(line, ":(%d+):");
        if (curr) list.insert(stack, tonum(curr));
    }
    local i=0;
    while (stack[i] != l1 and stack[i] != l2) {
        assert(stack[i] == l);
        i = i+1;
    }
    assert(i > 15);


    /// error in error handling
    local res, msg = xpcall(error, error);
    assert(!res and msg == "error in error handling");

    local fn f(x) {
        if (x==0) error("a\n");
        else {
            local aux = fn() { return f(x-1); };
            local a,b = xpcall(aux, aux);
            return a,b;
        }
    }
    f(3);

    local fn loopf(x,y,z) { return 1 + loopf(x, y, z); }

    res, msg = xpcall(loopf, fn(m) {
        assert(reg.find(m, "stack overflow"));
        checkerr("error handling", loopf);
        assert(math.sin(0) == 0);
        return 15;
    });
    assert(msg == 15);
    gc("restart"); /* make sure gc is running */
} else
    (Message or print)("skipped stack overflow tests");


{ /// errors in error handle that not necessarily go forever
    local fn err(n) { /// function to be used as message handler
        /* generate an error unless n is zero,
           so that there is a limited loop of errors */
        if (typeof(n) != "number") /// some other error?
            return n; /// report it
        else if (n == 0)
            return "}"; /// that will be the final message
        else error(n - 1); /// does the loop
    }

    local res, msg = xpcall(error, err, 170);
    assert(!res and msg == "}");

    /// too many levels (limit is 'TOKUI_MAXCCALLS')
    res, msg = xpcall(error, err, 300);
    assert(!res and msg == "C stack overflow");
}


{ /// non string messages
    local t = {};
    local res, msg = pcall(fn () { error(t); });
    assert(!res and msg == t);

    res, msg = pcall(fn () { error(nil); });
    assert(!res and msg == "<no error object>");

    local fn f() { error({msg="x"}); }
    res, msg = xpcall(f, fn (r) { return {msg=r.msg.."y"}; });
    assert(msg.msg == "xy");

    /// 'assert' with extra arguments
    res, msg = pcall(assert, false, "X", t);
    assert(!res and msg == "X");

    /// 'assert' with no message
    res, msg = pcall(fn () { assert(false); });
    local line = reg.match(msg, "%w+%.toku:(%d+): assertion failed!$");
    assert(tonum(line) == debug.getinfo(1, "l").currline - 2);

    /// 'assert' with non-string messages
    res, msg = pcall(assert, false, t);
    assert(!res and msg == t);

    res, msg = pcall(assert, nil, nil);
    assert(!res and typeof(msg) == "string");

    /// 'assert' without arguments
    res, msg = pcall(assert);
    assert(!res and reg.find(msg, "value expected"));
}

{ /// xpcall with arguments
    local a, b, c = xpcall(reg.find, error, "alo", "al");
    assert(a and b == 0 and c == 1);
    a, b, c = xpcall(reg.find, fn (x) { return {}; }, true, "al");
    assert(!a and typeof(b) == "table" and c == nil);


    print("testing tokens in error messages");
    checksyntax("syntax error", "", "error", 1);
    checksyntax("1.000", "", "1.000", 1);
    checksyntax("[=[a]=]", "", "[=[a]=]", 1);
    checksyntax("\"aa\"", "", "\"aa\"", 1);
    checksyntax("while << { }", "", "<<", 1);
    checksyntax("foreach >> { }", "", ">>", 1);

    /// test invalid non-printable char in a chunk
    checksyntax("a\1a = 1;", "", "<\\1>", 1);

    /// test 255 as first char in a chunk
    checksyntax("\255a = 1;", "", "<\\255>", 1);

    doit("I = load(\"a=9+;\"); aaa=3;");
    assert(__G.aaa==3 and !__G.I);
    __G.I,__G.aaa = nil;

    local lim = __heavy and 1000 or 100;
    for (local i=1; i<=lim; i=i+1) {
        doit("a = ");
        doit("a = 4+nil");
    }
}


{ /// testing syntax limits
    local fn testrep(init, rep, close, repc, finalresult) {
        local s = init..string.repeat(rep, 100)..close..string.repeat(repc, 100)..";";
        local res, msg = load(s);
        assert(res); /// 100 levels is OK
        if (finalresult)
            assert(res() == finalresult);
        s = init..string.repeat(rep, 500);
        res, msg = load(s); /// 500 levels is not ok
        assert(!res and (reg.find(msg, "too many") or
                    reg.find(msg, "overflow")));
    }

    testrep("local a; a", ",a", "= 1", ",1"); /// multiple assignment
    testrep("local a; a=", "[", "0", "]");
    testrep("return ", "(", "2", ")", 2);
    testrep("local fn a(x) { return x; }; return ", "a(", "2.2", ")", 2.2);
    testrep("", "{ ", "", " }");
    testrep("", "while (a) ", "", "");
    testrep("local a; ", "if (a); else ", ";", "");
    testrep("", "fn foo() { ", "", " }");
    testrep("local a = \"\"; return ", "a..", "\"a\"", "", "a");
    testrep("local a = 1; return ", "a**", "a", "", 1);

    checkmessage("a = f(x"..string.repeat(",x", (1<<24)-1)..");", "stack slots");

}
__G.a = nil;
