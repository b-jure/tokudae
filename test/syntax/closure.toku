{
    __ENV[true] = 10;
    local fn aux() { return __ENV[1 < 2]; }
    assert(aux() == 10);
    __ENV[true] = nil;
}

local A,B = 0,{g=10};
local fn f(x) {
    local a = [];
    for (local i = 0; i < 1000; i++) {
        local y = 0;
        {
            a[i] = fn() {
                B.g++;
                y += x;
                return y+A;
            };
        }
    }
    local dummy = fn() { return a[A]; };
    gc();
    assert(dummy() == a[0]);
    assert(a[0]() == x);
    assert(a[2]() == x);
    gc();
    assert(B.g == 12);
    return a;
}

local a = f(10);
/// force a GC in this level
gc("check"); /// clear check flag
do { /// loop until GC
    local a = tostr(A)..tostr(A)..tostr(A)..tostr(A); /// create garbage
    A++;
} while !gc("check");
assert(a[0]() == 20+A);
assert(a[0]() == 30+A);
assert(a[1]() == 10+A);
gc();
assert(a[1]() == 20+A);
assert(a[1]() == 30+A);
assert(a[2]() == 20+A);
assert(a[7]() == 10+A);
assert(B.g == 19);


/// testing equality
a = [];

for (local i=0; i<5; i=i+1) {
    a[i] = fn(x) {
        return i + a + __ENV;
    };
}
assert(a[2] != a[3] and a[3] != a[4]);

{
    local a = fn(x) { return math.sin(__ENV[x]); };
    local fn f() {
        return a;
    }
    assert(f() == f());
}

/// testing closures with 'for' x 'foreach' control variable
a = [];
for (local i=0; i<10; i=i+1) {
    a[i] = fn() { return i; };
    if (i == 3) break;
}
assert(a[4] == undef);
assert(a[0]() == 3);
assert(a[1]() == 3);
assert(a[2]() == 3);
assert(a[3]() == 3);

a = [];
local t = ["a", "b"];
foreach i,v in indices(t) {
    a[i] = {set = fn(x) { v=x; },
            get = fn() { return i, v; }};
    if (i == 1) break;
}
a[0].set(10);
local r,s = a[1].get();
assert(r == 1 and s == "b");
r,s = a[0].get();
assert(r == 0 and s == 10);
a[1].set("a");
r,s = a[1].get();
assert(r == 1 and s == "a");

{ /// testing closures with 'foreach' control variable x break
    local a = [0,0,0];
    local f;
    foreach i, _ in indices(a) {
        f = fn() { return i; };
        break;
    }
    assert(f() == 0);
    foreach i in range(0, len(t)) {
        local v = t[i];
        f = fn() { return i, v; };
        break;
    }
    assert(([f()])[0] == 0);
    assert(([f()])[1] == "a");
}



{ /// testing closure x break x return x errors
    local b;
    f = fn(x) {
        local first = 0;
        loop {
            if (x == 2 and !first) return;
            local a = "xuxu";
            b = fn(op, y) {
                if (op == "set")
                    a = x+y;
                else
                    return a;
            };
            switch (x) {
                case 0: case 1: return;
                case 2: break;
                default: error();
            }
            first = nil;
        }
    };

    foreach i in range(0, 3) {
        f(i);
        assert(b("get") == "xuxu");
        b("set", 10);
        assert(b("get") == 10+i);
        b = nil;
    }

    pcall(f, 3);
    assert(b("get") == "xuxu");
    b("set", 10);
    assert(b("get") == 13);
}



{ /// testing multi-level closure
    local y, w;
    f = fn(x) {
        return fn(y) {
            return fn(z) { return w+x+y+z; };
        };
    };

    y = f(10);
    w = 1.345;
    assert(y(20)(30) == 60+w);
}



{ /// testing closures x break
    local X, Y;
    local a = math.sin(0);

    while (a) {
        local b = 10;
        X = fn() { return b; }; /// closure with upvalue
        if (a) break;
    }

    {
        local b = 20;
        Y = fn() { return b; }; /// closure with upvalue
    }

    /// upvalues must be different
    assert(X() == 10 and Y() == 20);
}


{ /// testing closures x 'loop'
    local a = {};
    local i = 0;
    loop {
        local x = i;
        a[i] = fn() { i = x+1; return x; };
        if (i > 10 or a[i]() != x) break;
    }
    assert(i == 11 and a[0]() == 0 and a[2]() == 2 and i == 3);
}



{ /// test for correctly closing upvalues in tail calls of vararg functions
    local fn t() {
        local fn c(a,b) {
            assert(a=="test" and b=="OK");
        }
        local fn v(f, ...) {
            c("test", f() != 1 and "FAILED" or "OK");
        }
        local x = 1;
        return v(fn() { return x; });
    }
    t();
}
